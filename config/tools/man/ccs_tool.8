.TH "ccs_tool" "8" "" "" ""
.SH "NAME"
ccs_tool \- The tool used to make online updates of CCS config files.

.SH "SYNOPSIS"
.B ccs_tool
[\fIOPTION\fR].. <\fBcommand\fP>

.SH "DESCRIPTION"

\fBccs_tool\fP is part of the Cluster Configuration System (CCS).  It is
used to make online updates to cluster.conf.  It can also be used to
upgrade old style (GFS <= 6.0) CCS archives to the new xml cluster.conf
format.

.SH "OPTIONS"
.TP 
\fB\-h\fP
Help.  Print out the usage.
.TP 
\fB\-V\fP
Print the version information.

sub\-commands have their own options, see below for more detail
.SH "COMMANDS"

.TP 
\fBaddnode\fP [options] \fI<node> [<fenceoption=value>]...\fP
Adds a new node to the cluster configuration file. Fencing device options
are specified as key=value pairs (as many as required) and are entered into the
configuration file as is. See the documentation for your fencing agent for more
details (eg a powerswitch fence device may need to know which port the node is
connected to).
.br
\fIOptions:\fP
.br
\-v <votes>        Number of votes for this node (mandatory)
.br 
\-n <nodeid>       Node id for this node (optional)
.br
\-i <interface>    Network interface to use for this node. Mandatory if the cluster 
is using multicast as transport. Forbidden if not.
.br
\-m <multicast>    Multicast address for cluster. Only allowed on the first node to 
be added to the file. Subsequent nodes will use either multicast or broadcast 
depending on the properties of the first node.
.br
\-f <fencedevice>  Name of fence device to use for this node. The fence device 
section must already have been added to the file, probably using the addfence command.
.br
\-c <file>         Config file to use. Defaults to /etc/cluster/cluster.conf
.br
\-o <file>         Output file. Defaults to the same as -c
.br
\-C                Don't run "ccs_tool update" after changing file. This will
happen by default if the input file is the same as the output file.
.br
\-F                Force a "ccs_tool update" even if the input and output files
are different.



.TP 
\fBdelnode\fP [options] \fI<node>\fP
Delete a node from the cluster configuration file. Note: there is no 
"edit" command so to change the properties of a node you must delete it
and add it back in with the new properties.
.br
\fIOptions:\fP
.br
\-c <file>         Config file to use. Defaults to /etc/cluster/cluster.conf
.br
\-o <file>         Output file. Defaults to the same as -c
.br
\-C                Don't run "ccs_tool update" after changing file. This will
happen by default if the input file is the same as the output file.
.br
\-F                Force a "ccs_tool update" even if the input and output files
are different.



.TP 
\fBaddfence\fP [options] \fI<name> <agent> [<option>=<value>]...\fP
Adds a new fence device section to the cluster configuration file. <agent> is the
name of the fence agent that controls the device. the options following are entered
as key-value pairs. See the fence agent documentation for details about these. eg:
you may need to enter the IP address and username/password for a powerswitch fencing
device.
.br
\fIOptions:\fP
.br
\-c <file>         Config file to use. Defaults to /etc/cluster/cluster.conf
.br
\-o <file>         Output file. Defaults to the same as -c
.br
\-C                Don't run "ccs_tool update" after changing file. This will
happen by default if the input file is the same as the output file.
.br
\-F                Force a "ccs_tool update" even if the input and output files
are different.

.TP 
\fBdelfence\fP [options] \fI<node>\fP
Deletes a fencing device from the cluster configuration file.
delfence will allow you to remove a fence device that is in use by nodes.
This is to allow changes to be made, but be aware that it may produce an
invalid configuration file if you don't add it back in again.
.br
\fIOptions:\fP
.br
\-c <file>         Config file to use. Defaults to /etc/cluster/cluster.conf
.br
\-o <file>         Output file. Defaults to the same as -c
.br
\-C                Don't run "ccs_tool update" after changing file. This will
happen by default if the input file is the same as the output file.
.br
\-F                Force a "ccs_tool update" even if the input and output files
are different.


.TP 
\fBlsnode [options] \fP
List the nodes in the configuration file. This is (hopefully obviously) not
necessarily the same as the nodes currently in the cluster, but it should
be a superset.
.br
\fIOptions:\fP
.br
\-v                Verbose. Lists all the properties of the node, and the
node-specific properties of the fence device too.
.br
\-c <file>         Config file to use. Defaults to /etc/cluster/cluster.conf


.TP 
\fBlsfence [options] \fP
List all the fence devices in the cluster configuration file.
.br
\fIOptions:\fP
.br
\-v                Verbose. Lists all the properties of the fence device rather
than just the names and agents.
.br
\-c <file>         Config file to use. Defaults to /etc/cluster/cluster.conf


.TP 
\fBcreate [options] \fP \fI<clustername>\fP
Create a new, skeleton, configuration file. Note that "create" on its own will 
not create a valid configuration file. Fence agents and nodes will need to be 
added to it before handing it over to ccsd. The new configuration file will
have a version number of 1. Subsequent addnode/delnode/addfence/delfence operations
will increment the version number by 1 each time.
.br
\fIOptions:\fP
.br
.br
\-c <file>         Config file to create. Defaults to /etc/cluster/cluster.conf

.TP 
\fBaddnodeids\fP
Adds node ID numbers to all the nodes in cluster.conf. In RHEL4, node IDs were optional
and assigned by cman when a node joined the cluster. In RHEL5 they must be pre-assigned
in cluster.conf. This command will not change any node IDs that are already set in 
cluster.conf, it will simply add unique node ID numbers to nodes that do not already
have them.


.SH "SEE ALSO"
cluster.conf(5)
